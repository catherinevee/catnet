version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: catnet-db
    environment:
      POSTGRES_DB: catnet
      POSTGRES_USER: catnet
      POSTGRES_PASSWORD: hxwsnXOSVsovBipKPmXW
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - catnet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catnet"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: catnet-redis
    command: redis-server --requirepass sfzeYzhNduXLYOXZWMdk
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - catnet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: catnet-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: catnet
      RABBITMQ_DEFAULT_PASS: vplFWfOKgreVdSCesnqy
      RABBITMQ_DEFAULT_VHOST: catnet
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    networks:
      - catnet-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:latest
    container_name: catnet-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: vBUKrJGJrCkacZTGkoKc
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    volumes:
      - vault_data:/vault/file
      - vault_logs:/vault/logs
      - ./configs/vault:/vault/config
    ports:
      - "8200:8200"
    networks:
      - catnet-network
    command: server -dev

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: catnet-auth
    environment:
      DATABASE_URL: postgresql://catnet:hxwsnXOSVsovBipKPmXW@postgres:5432/catnet
      REDIS_URL: redis://:sfzeYzhNduXLYOXZWMdk@redis:6379/0
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: vBUKrJGJrCkacZTGkoKc
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-wYzuGgokCuFfAnokjknI}
      SERVICE_PORT: 8081
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - catnet-network
    command: ["python", "-m", "src.auth.service"]

  # GitOps Service
  gitops-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: catnet-gitops
    environment:
      DATABASE_URL: postgresql://catnet:hxwsnXOSVsovBipKPmXW@postgres:5432/catnet
      REDIS_URL: redis://:sfzeYzhNduXLYOXZWMdk@redis:6379/0
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: vBUKrJGJrCkacZTGkoKc
      SERVICE_PORT: 8082
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs
      - /tmp/catnet_repos:/tmp/catnet_repos
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - catnet-network
    command: ["python", "-m", "src.gitops.service"]

  # Deployment Service
  deployment-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: catnet-deployment
    environment:
      DATABASE_URL: postgresql://catnet:hxwsnXOSVsovBipKPmXW@postgres:5432/catnet
      REDIS_URL: redis://:sfzeYzhNduXLYOXZWMdk@redis:6379/0
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: vBUKrJGJrCkacZTGkoKc
      RABBITMQ_URL: amqp://catnet:vplFWfOKgreVdSCesnqy@rabbitmq:5672/catnet
      SERVICE_PORT: 8083
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - catnet-network
    command: ["python", "-m", "src.deployment.service"]

  # Device Service
  device-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: catnet-device
    environment:
      DATABASE_URL: postgresql://catnet:hxwsnXOSVsovBipKPmXW@postgres:5432/catnet
      REDIS_URL: redis://:sfzeYzhNduXLYOXZWMdk@redis:6379/0
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: vBUKrJGJrCkacZTGkoKc
      SERVICE_PORT: 8084
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs
      - ~/.ssh:/home/catnet/.ssh:ro  # SSH keys for device access
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_started
    networks:
      - catnet-network
    command: ["python", "-m", "src.device.service"]

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    container_name: catnet-gateway
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth-service
      - gitops-service
      - deployment-service
      - device-service
    networks:
      - catnet-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: catnet-prometheus
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - catnet-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: catnet-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: NglBwnDRpympcIpGIYQi
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - catnet-network

networks:
  catnet-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  vault_data:
  vault_logs:
  prometheus_data:
  grafana_data: