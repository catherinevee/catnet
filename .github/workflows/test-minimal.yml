name: Minimal CI Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-basic:
    name: Basic Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install core dependencies
        run: |
          python -m pip install --upgrade pip
          # Install only essential dependencies for testing
          pip install pytest pytest-asyncio pytest-cov
          pip install fastapi uvicorn pydantic
          pip install sqlalchemy asyncpg
          pip install cryptography passlib python-jose

      - name: Check Python syntax
        run: |
          python -m py_compile src/main.py
          python -m py_compile src/security/encryption.py
          python -m py_compile src/security/audit.py
          python -m py_compile src/core/validators.py

      - name: Run basic imports test
        run: |
          python -c "from src.security.encryption import EncryptionManager; print('âœ“ Encryption module loads')"
          python -c "from src.security.audit import AuditLogger; print('âœ“ Audit module loads')"
          python -c "from src.core.validators import ConfigValidator; print('âœ“ Validator module loads')"
          python -c "from src.core.exceptions import CatNetError; print('âœ“ Exceptions load')"

      - name: Run security tests (minimal)
        run: |
          # Create a simple test that can run without full dependencies
          cat << 'EOF' > test_minimal.py
          import sys
          import os
          sys.path.insert(0, os.path.abspath('.'))

          from src.security.encryption import EncryptionManager
          from src.core.validators import ConfigValidator, ValidationResult

          # Test encryption
          enc = EncryptionManager()
          encrypted = enc.encrypt_string("test")
          decrypted = enc.decrypt_string(encrypted)
          assert decrypted == "test", "Encryption test failed"
          print("âœ“ Encryption/decryption works")

          # Test password hashing
          hashed = EncryptionManager.hash_password("testpass123")
          assert EncryptionManager.verify_password("testpass123", hashed), "Password verification failed"
          print("âœ“ Password hashing works")

          # Test validator
          validator = ConfigValidator()
          result = ValidationResult()
          result.add_error("test error")
          assert not result.is_valid, "Validation result failed"
          print("âœ“ Validator works")

          print("\nâœ… All basic tests passed!")
          EOF

          python test_minimal.py

      - name: Check Docker files
        run: |
          echo "Checking Docker configuration..."
          test -f Dockerfile && echo "âœ“ Dockerfile exists" || echo "âœ— Dockerfile missing"
          test -f docker-compose.yml && echo "âœ“ docker-compose.yml exists" || echo "âœ— docker-compose.yml missing"

      - name: Validate project structure
        run: |
          echo "Validating project structure..."
          dirs=("src/api" "src/auth" "src/core" "src/db" "src/deployment" "src/devices" "src/gitops" "src/security")
          for dir in "${dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "âœ“ $dir exists"
            else
              echo "âœ— $dir missing"
              exit 1
            fi
          done

      - name: Summary
        run: |
          echo "========================"
          echo "  CI Test Summary"
          echo "========================"
          echo "âœ“ Code syntax valid"
          echo "âœ“ Core modules load"
          echo "âœ“ Basic functionality works"
          echo "âœ“ Project structure correct"
          echo ""
          echo "ðŸŽ‰ Basic CI pipeline passed!"