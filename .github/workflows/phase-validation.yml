name: Phase Validation Workflow

on:
  workflow_dispatch:
    inputs:
      phase:
        description: 'Phase to validate'
        required: true
        type: choice
        options:
          - 'phase-1-infrastructure'
          - 'phase-2-deployment'
          - 'phase-3-device'
          - 'phase-4-gitops'
          - 'phase-5-validators'
          - 'phase-6-monitoring'
          - 'phase-7-uat'
          - 'phase-8-production'

jobs:
  validate-phase:
    name: Validate ${{ github.event.inputs.phase }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Phase 1: Core Infrastructure
      - name: Validate Phase 1 - Core Infrastructure
        if: github.event.inputs.phase == 'phase-1-infrastructure'
        run: |
          echo "Validating Phase 1: Core Infrastructure"

          # Test security module
          pytest tests/test_security.py -v --junit-xml=phase1-security.xml

          # Test database connectivity
          python -m src.main validate-config

          # Test authentication service
          python -c "from src.auth.service import AuthenticationService; print('Auth service OK')"

          # Check code coverage
          pytest tests/test_security.py --cov=src/security --cov-report=term --cov-fail-under=90

      # Phase 2: Deployment Service
      - name: Validate Phase 2 - Deployment Service
        if: github.event.inputs.phase == 'phase-2-deployment'
        run: |
          echo "Validating Phase 2: Deployment Service"

          # Test deployment service
          pytest tests/test_deployment.py -v --junit-xml=phase2-deployment.xml || true

          # Test deployment strategies
          python scripts/test_deployment_strategies.py || true

          # Validate rollback mechanism
          python scripts/test_rollback.py || true

      # Phase 3: Device Service
      - name: Validate Phase 3 - Device Service
        if: github.event.inputs.phase == 'phase-3-device'
        run: |
          echo "Validating Phase 3: Device Service"

          # Test device connectors
          pytest tests/test_devices.py -v --junit-xml=phase3-devices.xml || true

          # Test vendor handlers
          python scripts/test_vendor_compatibility.py || true

      # Phase 4: GitOps Service
      - name: Validate Phase 4 - GitOps Service
        if: github.event.inputs.phase == 'phase-4-gitops'
        run: |
          echo "Validating Phase 4: GitOps Service"

          # Test Git operations
          pytest tests/test_gitops.py -v --junit-xml=phase4-gitops.xml || true

          # Test webhook processing
          python scripts/test_webhooks.py || true

      # Phase 5: Configuration Validators
      - name: Validate Phase 5 - Configuration Validators
        if: github.event.inputs.phase == 'phase-5-validators'
        run: |
          echo "Validating Phase 5: Configuration Validators"

          # Test validators
          pytest tests/test_validators.py -v --junit-xml=phase5-validators.xml || true

          # Test with sample configs
          python scripts/validate_sample_configs.py || true

      # Phase 6: Monitoring & Observability
      - name: Validate Phase 6 - Monitoring
        if: github.event.inputs.phase == 'phase-6-monitoring'
        run: |
          echo "Validating Phase 6: Monitoring & Observability"

          # Check metrics endpoints
          python scripts/check_metrics.py || true

          # Validate dashboards
          python scripts/validate_dashboards.py || true

      # Phase 7: User Acceptance Testing
      - name: Validate Phase 7 - UAT
        if: github.event.inputs.phase == 'phase-7-uat'
        run: |
          echo "Validating Phase 7: User Acceptance Testing"

          # Run UAT scenarios
          python scripts/run_uat_scenarios.py || true

          # Generate UAT report
          python scripts/generate_uat_report.py || true

      # Phase 8: Production Readiness
      - name: Validate Phase 8 - Production Readiness
        if: github.event.inputs.phase == 'phase-8-production'
        run: |
          echo "Validating Phase 8: Production Readiness"

          # Security audit
          bandit -r src/ -f json -o security-audit.json

          # Performance baseline
          python scripts/performance_baseline.py || true

          # Documentation check
          python scripts/check_documentation.py || true

          # Production checklist
          python scripts/production_checklist.py || true

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase-validation-results-${{ github.event.inputs.phase }}
          path: |
            *.xml
            *.json
            *.html

      - name: Create validation report
        if: always()
        run: |
          echo "# Phase Validation Report" > validation-report.md
          echo "## Phase: ${{ github.event.inputs.phase }}" >> validation-report.md
          echo "## Date: $(date)" >> validation-report.md
          echo "## Status: ${{ job.status }}" >> validation-report.md

          if [ -f phase*.xml ]; then
            echo "## Test Results" >> validation-report.md
            python scripts/parse_junit.py phase*.xml >> validation-report.md
          fi

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-report-${{ github.event.inputs.phase }}
          path: validation-report.md